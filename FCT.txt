<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Friends Cricket Team - Scorer</title>
    
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- jsPDF and html2canvas for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Teko:wght@500;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #1a202c;
            color: #e2e8f0;
        }
        .title-font {
            font-family: 'Teko', sans-serif;
        }
        .card {
            background-color: #2d3748;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .btn {
            transition: all 0.3s ease;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .input-field {
            background-color: #4a5568;
            border: 1px solid #718096;
            color: #e2e8f0;
        }
        /* Styles for the content that will be converted to PDF */
        #pdfContent {
            background-color: #fff;
            color: #1a202c;
            padding: 2rem;
        }
        /* Hide ball-by-ball details from the screen, but make it available for html2canvas */
        #ballByBallDetails {
             color: #1a202c; /* Ensure text is visible on white background of PDF */
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">

    <div class="container mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-5xl md:text-7xl font-bold text-white title-font tracking-wider">Friends Cricket Team</h1>
        </header>

        <!-- Match Setup Section -->
        <section id="matchSetup" class="card p-6 md:p-8 max-w-2xl mx-auto">
            <h2 class="text-3xl font-bold mb-6 text-center title-font text-cyan-400">Match Setup</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="team1Name" class="block mb-2 text-sm font-medium text-gray-300">Team 1 Name</label>
                    <input type="text" id="team1Name" class="w-full p-3 rounded-lg input-field" value="Epic Blasters">
                </div>
                <div>
                    <label for="team2Name" class="block mb-2 text-sm font-medium text-gray-300">Team 2 Name</label>
                    <input type="text" id="team2Name" class="w-full p-3 rounded-lg input-field" value="Master Batters">
                </div>
                <div>
                    <label for="overs" class="block mb-2 text-sm font-medium text-gray-300">Number of Overs</label>
                    <input type="number" id="overs" class="w-full p-3 rounded-lg input-field" value="5" min="1">
                </div>
                <div>
                    <label for="players" class="block mb-2 text-sm font-medium text-gray-300">Number of Players</label>
                    <input type="number" id="players" class="w-full p-3 rounded-lg input-field" value="11" min="2">
                </div>
            </div>
            <div class="mt-8 text-center">
                <button id="startMatchBtn" class="btn bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-full text-lg">
                    Start Match
                </button>
            </div>
        </section>

        <!-- Scoring Section -->
        <section id="scoringSection" class="hidden">
             <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Score Display -->
                <div class="lg:col-span-2 card p-6">
                    <div class="flex justify-between items-center mb-4">
                        <div>
                            <h2 id="battingTeamName" class="text-3xl font-bold title-font"></h2>
                            <p class="text-gray-400">Target: <span id="targetScore">--</span></p>
                        </div>
                        <div class="text-right">
                            <p class="text-5xl font-bold title-font"><span id="totalScore">0</span>/<span id="wickets">0</span></p>
                            <p class="text-lg text-gray-400">Overs: <span id="oversPlayed">0.0</span></p>
                        </div>
                    </div>
                    <div class="h-2 bg-gray-600 rounded-full mb-6">
                        <div id="scoreProgress" class="h-2 bg-cyan-400 rounded-full" style="width: 0%;"></div>
                    </div>
                    
                    <!-- Scoring Controls -->
                     <div class="grid grid-cols-4 sm:grid-cols-7 gap-3 text-center">
                        <button class="score-btn btn bg-gray-600 hover:bg-gray-500 p-4 rounded-lg font-bold" data-run="0">0</button>
                        <button class="score-btn btn bg-gray-600 hover:bg-gray-500 p-4 rounded-lg font-bold" data-run="1">1</button>
                        <button class="score-btn btn bg-gray-600 hover:bg-gray-500 p-4 rounded-lg font-bold" data-run="2">2</button>
                        <button class="score-btn btn bg-gray-600 hover:bg-gray-500 p-4 rounded-lg font-bold" data-run="3">3</button>
                        <button class="score-btn btn bg-green-500 hover:bg-green-600 p-4 rounded-lg font-bold" data-run="4">4</button>
                        <button class="score-btn btn bg-purple-500 hover:bg-purple-600 p-4 rounded-lg font-bold" data-run="6">6</button>
                        <button id="wicketBtn" class="btn bg-red-500 hover:bg-red-600 p-4 rounded-lg font-bold">Wicket</button>
                        <button class="score-btn btn bg-yellow-500 hover:bg-yellow-600 p-4 rounded-lg font-bold" data-run="wide">Wide</button>
                        <button class="score-btn btn bg-yellow-500 hover:bg-yellow-600 p-4 rounded-lg font-bold" data-run="noball">No Ball</button>
                    </div>
                     <!-- Match Controls -->
                    <div class="mt-6 text-center">
                        <button id="endMatchBtn" class="btn bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-6 rounded-full">End Match</button>
                    </div>
                </div>

                <!-- Live Info -->
                <div class="card p-6">
                    <h3 class="text-xl font-bold mb-4 title-font text-cyan-400">This Over</h3>
                    <div id="thisOver" class="flex flex-wrap gap-2 mb-4"></div>
                    <h3 class="text-xl font-bold mb-2 title-font text-cyan-400">Commentary</h3>
                    <div id="commentary" class="text-sm h-48 overflow-y-auto bg-gray-700 p-2 rounded"></div>
                </div>
            </div>
        </section>

        <!-- Match End Section -->
        <section id="matchEndSection" class="hidden card p-8 max-w-3xl mx-auto text-center">
             <div id="pdfContent">
                <div id="matchSummary">
                    <h2 class="text-4xl font-bold mb-4 title-font text-cyan-600">Match Summary</h2>
                    <p id="matchResult" class="text-2xl font-semibold mb-6"></p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-left">
                        <div id="summaryTeam1"></div>
                        <div id="summaryTeam2"></div>
                    </div>
                </div>
                <!-- This section is for the PDF only -->
                <div id="ballByBallDetails" class="text-left mt-6"></div>
            </div>
            <div class="mt-8 flex justify-center gap-4">
                <button id="downloadPdfBtn" class="btn bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-full text-lg">
                    Download PDF
                </button>
                <button id="newMatchBtn" class="btn bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-8 rounded-full text-lg">
                    New Match
                </button>
            </div>
        </section>

    </div>

    <script>
        // DOM Elements
        const matchSetupSection = document.getElementById('matchSetup');
        const scoringSection = document.getElementById('scoringSection');
        const matchEndSection = document.getElementById('matchEndSection');
        const startMatchBtn = document.getElementById('startMatchBtn');
        const downloadPdfBtn = document.getElementById('downloadPdfBtn');
        const endMatchBtn = document.getElementById('endMatchBtn');
        const newMatchBtn = document.getElementById('newMatchBtn');

        // Match State
        let matchState = {};

        // Initialize the application state
        function initializeMatchState() {
            const team1Name = document.getElementById('team1Name').value;
            const team2Name = document.getElementById('team2Name').value;
            const overs = parseInt(document.getElementById('overs').value);
            const players = parseInt(document.getElementById('players').value);

            matchState = {
                team1: { name: team1Name, score: 0, wickets: 0, balls: 0, timeline: [] },
                team2: { name: team2Name, score: 0, wickets: 0, balls: 0, timeline: [] },
                maxOvers: overs,
                maxWickets: players - 1,
                currentInnings: 1,
                battingTeam: 'team1',
                bowlingTeam: 'team2',
                target: 0,
                gameOver: false,
                commentaryLog: ['Match has started!'],
            };
        }

        // Function to start the match
        function startMatch() {
            initializeMatchState();
            matchSetupSection.classList.add('hidden');
            scoringSection.classList.remove('hidden');
            matchEndSection.classList.add('hidden');
            updateUI();
        }

        // Function to update all UI elements
        function updateUI() {
            const currentBattingTeam = matchState[matchState.battingTeam];
            document.getElementById('battingTeamName').textContent = currentBattingTeam.name;
            document.getElementById('totalScore').textContent = currentBattingTeam.score;
            document.getElementById('wickets').textContent = currentBattingTeam.wickets;
            
            const oversPlayed = Math.floor(currentBattingTeam.balls / 6);
            const ballsThisOver = currentBattingTeam.balls % 6;
            document.getElementById('oversPlayed').textContent = `${oversPlayed}.${ballsThisOver}`;

            if (matchState.target > 0) {
                document.getElementById('targetScore').textContent = matchState.target;
                const progress = (currentBattingTeam.score / matchState.target) * 100;
                document.getElementById('scoreProgress').style.width = `${Math.min(progress, 100)}%`;
            } else {
                 document.getElementById('targetScore').textContent = '--';
                 document.getElementById('scoreProgress').style.width = `0%`;
            }

            // Update "This Over" display
            const thisOverEl = document.getElementById('thisOver');
            thisOverEl.innerHTML = '';
            const ballsInCurrentOver = currentBattingTeam.timeline.slice(oversPlayed * 6);
            ballsInCurrentOver.forEach(event => {
                thisOverEl.innerHTML += `<span class="p-2 rounded-full text-xs font-bold ${getEventColor(event)}">${event}</span>`;
            });

            // Update Commentary
            const commentaryEl = document.getElementById('commentary');
            commentaryEl.innerHTML = matchState.commentaryLog.slice().reverse().map(log => `<p>${log}</p>`).join('');
            commentaryEl.scrollTop = 0; // Scroll to top
        }
        
        // Helper to get color for timeline events
        function getEventColor(event) {
            event = String(event);
            if (event === 'W') return 'bg-red-500 text-white';
            if (event === '4' || event === '6') return 'bg-green-500 text-white';
            if (event === 'Wd' || event === 'Nb') return 'bg-yellow-500 text-black';
            return 'bg-gray-500 text-white';
        }

        // Handle scoring events
        function handleScore(run) {
            if (matchState.gameOver) return;

            const currentBattingTeam = matchState[matchState.battingTeam];
            let commentary = '';

            if (typeof run === 'number') {
                currentBattingTeam.score += run;
                currentBattingTeam.balls++;
                currentBattingTeam.timeline.push(run);
                commentary = `${run} run${run !== 1 ? 's' : ''}.`;
            } else if (run === 'wide') {
                currentBattingTeam.score++;
                currentBattingTeam.timeline.push('Wd');
                commentary = 'Wide ball, 1 extra run.';
            } else if (run === 'noball') {
                currentBattingTeam.score++;
                currentBattingTeam.balls++;
                currentBattingTeam.timeline.push('Nb');
                commentary = 'No ball, 1 extra run.';
            }
            
            matchState.commentaryLog.push(`${document.getElementById('oversPlayed').textContent} ov: ${commentary}`);
            checkInningsEnd();
            updateUI();
        }

        // Handle a wicket
        function handleWicket() {
            if (matchState.gameOver) return;

            const currentBattingTeam = matchState[matchState.battingTeam];
            currentBattingTeam.wickets++;
            currentBattingTeam.balls++;
            currentBattingTeam.timeline.push('W');
            matchState.commentaryLog.push(`${document.getElementById('oversPlayed').textContent} ov: It's a WICKET!`);
            
            checkInningsEnd();
            updateUI();
        }

        // Check if an innings or the match has ended
        function checkInningsEnd() {
            const currentBattingTeam = matchState[matchState.battingTeam];
            const oversPlayed = Math.floor(currentBattingTeam.balls / 6);

            let inningsOver = false;
            if (currentBattingTeam.wickets >= matchState.maxWickets || oversPlayed >= matchState.maxOvers) {
                inningsOver = true;
            }
            
            if (matchState.currentInnings === 2) {
                 if (currentBattingTeam.score >= matchState.target) {
                    inningsOver = true;
                 }
            }

            if (inningsOver) {
                if (matchState.currentInnings === 1) {
                    // End of 1st Innings
                    matchState.target = currentBattingTeam.score + 1;
                    matchState.currentInnings = 2;
                    matchState.battingTeam = 'team2';
                    matchState.bowlingTeam = 'team1';
                    const commentaryText = `End of 1st innings. ${matchState.team2.name} needs ${matchState.target} to win.`;
                    matchState.commentaryLog.push(commentaryText);
                } else {
                    // End of Match
                    matchState.gameOver = true;
                    endMatch();
                }
            }
        }

        // Finalize the match and show the summary
        function endMatch() {
            matchState.gameOver = true;
            scoringSection.classList.add('hidden');
            matchEndSection.classList.remove('hidden');

            const team1 = matchState.team1;
            const team2 = matchState.team2;
            let resultText = '';

            if (matchState.target === 0 || team1.score > team2.score) {
                 resultText = `${team1.name} won by ${team1.score - team2.score} runs.`;
            } else if (team2.score >= matchState.target) {
                resultText = `${team2.name} won by ${matchState.maxWickets - team2.wickets} wickets.`;
            } else {
                resultText = "Match Tied.";
            }

            document.getElementById('matchResult').textContent = resultText;
            
            document.getElementById('summaryTeam1').innerHTML = `
                <h3 class="text-2xl font-bold title-font">${team1.name}</h3>
                <p class="text-xl">${team1.score}/${team1.wickets}</p>
                <p class="text-sm text-gray-500">Overs: ${Math.floor(team1.balls / 6)}.${team1.balls % 6}</p>
            `;
            document.getElementById('summaryTeam2').innerHTML = `
                <h3 class="text-2xl font-bold title-font">${team2.name}</h3>
                <p class="text-xl">${team2.score}/${team2.wickets}</p>
                <p class="text-sm text-gray-500">Overs: ${Math.floor(team2.balls / 6)}.${team2.balls % 6}</p>
            `;
        }

        // Function to format the ball-by-ball timeline for the PDF
        function formatTimelineForPdf(team) {
            if (team.timeline.length === 0) return '';
            let html = `<h4 class="text-lg font-bold mt-4 mb-2">${team.name} Innings (${team.score}/${team.wickets})</h4>`;
            let over = 0;
            html += `<div class="border-t border-b py-2">`;
            team.timeline.forEach((ball, index) => {
                const isLegalDelivery = ball !== 'Wd' && ball !== 'Nb';
                const ballInOver = team.timeline.slice(0, index + 1).filter(b => b !== 'Wd' && b !== 'Nb').length % 6;

                if (isLegalDelivery && ballInOver === 1 && index > 0) {
                     over++;
                     html += `</div><div class="border-b py-2">`;
                }
                 html += `<span style="display: inline-block; margin: 2px; padding: 4px 6px; border-radius: 9999px; font-size: 12px; font-weight: bold; color: ${getEventColor(ball).includes('white') ? 'white' : 'black'}; background-color: ${getEventColor(ball).match(/bg-([a-z]+)-500/)[0].replace('bg-','').replace('-500','')}">${ball}</span>`;
            });
            html += `</div>`;
            return html;
        }
        
        // Function to generate and download the PDF
        function downloadPDF() {
            // 1. Populate the hidden details section
            const detailsEl = document.getElementById('ballByBallDetails');
            let ballByBallHtml = '<h3 class="text-2xl font-bold mt-8 border-t pt-4">Ball-by-Ball Details</h3>';
            ballByBallHtml += formatTimelineForPdf(matchState.team1);
            ballByBallHtml += formatTimelineForPdf(matchState.team2);
            detailsEl.innerHTML = ballByBallHtml;

            // 2. Generate PDF from the content
            const { jsPDF } = window.jspdf;
            const pdfContentElement = document.getElementById('pdfContent');
            
            html2canvas(pdfContentElement, { scale: 2, useCORS: true }).then(canvas => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF('p', 'mm', 'a4');
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
                pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
                pdf.save("cricket-match-summary-detailed.pdf");

                // 3. Clear the details section after PDF generation
                detailsEl.innerHTML = '';
            });
        }
        
        // Function to start a new match
        function startNewMatch() {
             matchEndSection.classList.add('hidden');
             matchSetupSection.classList.remove('hidden');
        }

        // Event Listeners
        startMatchBtn.addEventListener('click', startMatch);
        document.querySelectorAll('.score-btn').forEach(button => {
            button.addEventListener('click', () => {
                const run = button.dataset.run;
                handleScore(!isNaN(parseInt(run)) ? parseInt(run) : run);
            });
        });
        document.getElementById('wicketBtn').addEventListener('click', handleWicket);
        endMatchBtn.addEventListener('click', endMatch);
        downloadPdfBtn.addEventListener('click', downloadPDF);
        newMatchBtn.addEventListener('click', startNewMatch);

    </script>
</body>
</html>
